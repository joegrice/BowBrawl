/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AssetConstants; });
var AssetConstants;
(function (AssetConstants) {
    var Backgrounds;
    (function (Backgrounds) {
        Backgrounds["BackgroundNight"] = "backgroundNight.png";
    })(Backgrounds = AssetConstants.Backgrounds || (AssetConstants.Backgrounds = {}));
    var Players;
    (function (Players) {
        Players["PinkyPlayer"] = "pinky.png";
    })(Players = AssetConstants.Players || (AssetConstants.Players = {}));
})(AssetConstants || (AssetConstants = {}));


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_index__ = __webpack_require__(2);



/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__client_engine_BrawlGame__ = __webpack_require__(3);

new __WEBPACK_IMPORTED_MODULE_0__client_engine_BrawlGame__["a" /* BrawlGame */]();


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BrawlGame; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Game__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants_AssetConstants__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var BrawlGame = /** @class */ (function (_super) {
    __extends(BrawlGame, _super);
    function BrawlGame() {
        var _this = _super.call(this) || this;
        _this.game = new Phaser.Game(1024, 768, Phaser.AUTO, "BowBrawl", {
            preload: _this.preload(),
            create: _this.create(),
            update: _this.update()
        });
        return _this;
    }
    BrawlGame.prototype.create = function () {
        _super.prototype.properties.call(this, this.game);
        _super.prototype.manageAssets.call(this, this.game);
    };
    BrawlGame.prototype.preload = function () {
        var game = this.game.load;
        game.crossOrigin = "anonymous";
        game.image(__WEBPACK_IMPORTED_MODULE_1__constants_AssetConstants__["a" /* AssetConstants */].Players.PinkyPlayer, "assets/players/pinky.png");
        game.image(__WEBPACK_IMPORTED_MODULE_1__constants_AssetConstants__["a" /* AssetConstants */].Backgrounds.BackgroundNight, "assets/backgroundNight.png");
    };
    BrawlGame.prototype.update = function () {
        _super.prototype.gameUpdate.call(this, this.game);
    };
    return BrawlGame;
}(__WEBPACK_IMPORTED_MODULE_0__Game__["a" /* Game */]));



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Game; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__actors_Player__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants_AssetConstants__ = __webpack_require__(0);


var Game = /** @class */ (function () {
    function Game() {
        this.players = [];
    }
    /**
     * @desc To be used for attaching listeners
     * @param game instance of game
     */
    Game.prototype.manageAssets = function (game) {
        this.player = new __WEBPACK_IMPORTED_MODULE_0__actors_Player__["a" /* Player */](game);
    };
    Game.prototype.gameUpdate = function (game) {
        if (this.player && this.player.controls) {
            this.player.updateView();
        }
    };
    Game.prototype.properties = function (game) {
        game.stage.disableVisibilityChange = true;
        game.time.desiredFps = 60;
        // Background set
        game.add.tileSprite(0, 0, game.width, game.height, __WEBPACK_IMPORTED_MODULE_1__constants_AssetConstants__["a" /* AssetConstants */].Backgrounds.BackgroundNight);
        game.add.sprite(0, 0, __WEBPACK_IMPORTED_MODULE_1__constants_AssetConstants__["a" /* AssetConstants */].Backgrounds.BackgroundNight);
        game.renderer.clearBeforeRender = false;
        game.physics.startSystem(Phaser.Physics.ARCADE);
    };
    return Game;
}());



/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Player; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__controlls_Controls__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants_AssetConstants__ = __webpack_require__(0);


var Physics = Phaser.Physics;
var Player = /** @class */ (function () {
    function Player(gameInstance, playerInstance) {
        this.gameInstance = gameInstance;
        this.playerInstance = playerInstance;
        this._playerState = new Map();
        this._velocity = 300;
        this.generatePlayer(gameInstance);
    }
    Player.prototype.generatePlayer = function (game) {
        // todo: Should later be moved to a factory? Or can this be considered a factory?
        this.initControls();
        this.sprite = this.gameInstance.add.sprite(100, 100, __WEBPACK_IMPORTED_MODULE_1__constants_AssetConstants__["a" /* AssetConstants */].Players.PinkyPlayer);
        this.sprite.id = "1"; // todo: Automate this later
        this.sprite.anchor.set(0.5, 0.5);
        this.sprite.name = "Random name";
        this.addPhysicsToPlayer(game);
    };
    Player.prototype.initControls = function () {
        this._controls = new __WEBPACK_IMPORTED_MODULE_0__controlls_Controls__["a" /* Controls */](this.gameInstance, this);
    };
    Player.prototype.addPhysicsToPlayer = function (game) {
        game.physics.enable(this.sprite, Physics.ARCADE);
        this.sprite.body.collideWorldBounds = true;
        this.sprite.body.gravity.y = 50;
        this.sprite.body.angularDrag = 50;
    };
    Player.prototype.updateView = function () {
        this.controls.update();
    };
    Player.prototype.pickupWeapon = function () {
        // todo: When user picks up new weapon
        throw new Error("Function not implemented");
    };
    Object.defineProperty(Player.prototype, "controls", {
        // Setters and Getters
        get: function () {
            return this._controls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "sprite", {
        get: function () {
            return this._sprite;
        },
        set: function (value) {
            this._sprite = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "playerState", {
        get: function () {
            return this._playerState;
        },
        set: function (value) {
            this._playerState = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "velocity", {
        get: function () {
            return this._velocity;
        },
        set: function (value) {
            this._velocity = value;
        },
        enumerable: true,
        configurable: true
    });
    return Player;
}());



/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Controls; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants_PlayerStates__ = __webpack_require__(7);

var Controls = /** @class */ (function () {
    function Controls(gameInstance, playerInstance) {
        this.gameInstance = gameInstance;
        this.playerInstance = playerInstance;
        this.controls = {
            cursors: this.gameInstance.input.keyboard.createCursorKeys(),
            shoot: this.gameInstance.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR)
        };
    }
    Controls.prototype.update = function () {
        if (this.playerInstance.sprite.alive) {
            this.playerInstance.playerState.set(__WEBPACK_IMPORTED_MODULE_0__constants_PlayerStates__["a" /* PlayerStates */].CanShoot, false);
            var vel = this.playerInstance.velocity;
            var acceleration = this.playerInstance.sprite.body.acceleration;
            var rotation = this.playerInstance.sprite.rotation;
            var upSpeed = 100;
            if (this.controls.cursors.up.isDown) {
                this.gameInstance.physics.arcade.accelerationFromRotation(rotation, upSpeed, acceleration);
                // todo: play move animation
                this.playerInstance.playerState.set(__WEBPACK_IMPORTED_MODULE_0__constants_PlayerStates__["a" /* PlayerStates */].IsMoving, true);
            }
            else {
                this.playerInstance.sprite.body.acceleration.set(0);
                this.playerInstance.playerState.set(__WEBPACK_IMPORTED_MODULE_0__constants_PlayerStates__["a" /* PlayerStates */].IsMoving, false);
            }
            if (this.controls.cursors.down.isDown) {
                this.playerInstance.sprite.body.angularVelocity = -vel;
            }
            else if (this.controls.cursors.left.isDown) {
                this.playerInstance.sprite.body.angularVelocity = vel;
            }
            else {
                this.playerInstance.sprite.body.angularVelocity = 0;
            }
        }
    };
    return Controls;
}());



/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PlayerStates; });
var PlayerStates;
(function (PlayerStates) {
    PlayerStates[PlayerStates["CanShoot"] = 0] = "CanShoot";
    PlayerStates[PlayerStates["IsMoving"] = 1] = "IsMoving";
})(PlayerStates || (PlayerStates = {}));


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,